package leetcode.dp.hard;

/**
 * @version 1.0
 * @description leetcode
 * <p>
 * 有 n 个气球，编号为0 到 n - 1，每个气球上都标有一个数字，这些数字存在数组 nums 中。
 * <p>
 * 现在要求你戳破所有的气球。戳破第 i 个气球，你可以获得 nums[i - 1] * nums[i] * nums[i + 1] 枚硬币。 这里的 i - 1 和 i + 1 代表和 i 相邻的两个气球的序号。如果 i - 1或 i + 1 超出了数组的边界，那么就当它是一个数字为 1 的气球。
 * <p>
 * 求所能获得硬币的最大数量。
 * <p>
 * 示例 1：
 * 输入：nums = [3,1,5,8]
 * 输出：167
 * 解释：
 * nums = [3,1,5,8] --> [3,5,8] --> [3,8] --> [8] --> []
 * coins =  3*1*5    +   3*5*8   +  1*3*8  + 1*8*1 = 167
 * 示例 2：
 * <p>
 * 输入：nums = [1,5]
 * 输出：10
 *  
 * <p>
 * 提示：
 * <p>
 * n == nums.length
 * 1 <= n <= 500
 * 0 <= nums[i] <= 100
 * 通过次数39,586提交次数5
 * <p>
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/burst-balloons
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 * @date 2021/3/2 21:21
 **/
public class _312_BurstBalloons {
    public int maxCoins(int[] nums) {
        // 对于某个区间i，j
        // 戳破其中第k个气球，可以得到的金币是nums[k-1] * nums[k] * nums[k+1]
        // 如果k-1或者k+1超过了边界，即k是区间的左端点，或者k是区间的右端点，那么特殊处理为金币等于1

        // 在不考虑边界的情况下，对于 “开”区间 i,j，此时从i < k < j选出一个k一定不为边界情况
        // 假设dp[i][j]表示从nums中的 “开”区间 i,j 中戳破所有气球能获得的最大金币数
        // 假设最后一个戳破的气球是k个气球被戳破，那么k可以把区间(i,j)分为(i,k)(k,j)
        // 由于是最后一个被戳破的气球k，那么k两端就只剩i和j了，所以他相邻的两个气球就是i和j
        // 此时能够获得的最大金币dp[i][j] = dp[i][k] + nums[i] * nums[k] * nums[j] + dp[k][j]
        // 如果能够遍历i到j，计算出每个不同位置的k，那么求出最大值，就是区间(i,j)的最优解

        int n = nums.length;
        // dp问题如何定义递推表达式，比较好的分析方式就是自底向上
        // 自底向上：对于区间(i,j)，思考 “最后” 一个被戳爆的气球，这里的 “最后” 一个，其实就是 “底”

        // 这里需要处理的就是k的边界问题，如果戳爆的气球处于给定数组nums的两端，那么他左右相邻越界的部分必须要当作金币1来处理
        // 可以在dp数组中，先预留出这两个边界
        // 即  3,1,5,8 ->  1,3,1,5,8,1
        // 两头多出来的1，就是边界情况下的气球，但是我们又不能把他们戳爆
        // 所以dp数组需要多2个额外空间存储边界情况
        int[][] dp = new int[n + 2][n + 2];
        // 对于给定的气球数组nums，也需要多开辟2个额外空间存储不存在的边界气球
        int[] newNums = new int[n + 2];
        newNums[0] = 1;
        newNums[n + 1] = 1;
        // 新气球数组两端的金币只有1
        for (int i = 1; i < n + 1; i++) {
            newNums[i] = nums[i - 1];
        }


        // 遍历区间长度
        // 由于开区间，所以至少需要从3个气球开始遍历
        for (int len = 3; len <= n + 2; len++) {

        }


        return -1;
    }
}