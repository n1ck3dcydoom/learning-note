package leetcode.dp.hard;

/**
 * @version 1.0
 * @description leetcode
 * <p>
 * 给定一个字符串 (s) 和一个字符模式 (p) ，实现一个支持 '?' 和 '*' 的通配符匹配。
 * <p>
 * '?' 可以匹配任何单个字符。
 * '*' 可以匹配任意字符串（包括空字符串）。
 * 两个字符串完全匹配才算匹配成功。
 * <p>
 * 说明:
 * <p>
 * s 可能为空，且只包含从 a-z 的小写字母。
 * p 可能为空，且只包含从 a-z 的小写字母，以及字符 ? 和 *。
 * 示例 1:
 * <p>
 * 输入:
 * s = "aa"
 * p = "a"
 * 输出: false
 * 解释: "a" 无法匹配 "aa" 整个字符串。
 * 示例 2:
 * <p>
 * 输入:
 * s = "aa"
 * p = "*"
 * 输出: true
 * 解释: '*' 可以匹配任意字符串。
 * 示例 3:
 * <p>
 * 输入:
 * s = "cb"
 * p = "?a"
 * 输出: false
 * 解释: '?' 可以匹配 'c', 但第二个 'a' 无法匹配 'b'。
 * 示例 4:
 * <p>
 * 输入:
 * s = "adceb"
 * p = "*a*b"
 * 输出: true
 * 解释: 第一个 '*' 可以匹配空字符串, 第二个 '*' 可以匹配字符串 "dce".
 * 示例 5:
 * <p>
 * 输入:
 * s = "acdcb"
 * p = "a*c?b"
 * 输出: false
 * <p>
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/wildcard-matching
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 * @date 2021/3/17 22:18
 **/
public class _44_WildcardMatching {
    public boolean isMatch(String s, String p) {
        // 跟之前有道题（具体哪一道想不起来了）的dp定义方式非常类似
        // 就是定义第一个字符数组的前i个字符串，和第二个字符数组的前j个字符串，符合某种条件
        // 这里的条件就是s的前i个字符串能够被p的前j个字符串匹配上

        // 如何求解递推表达式？
        // 对于dp[i][j]，考虑模式串p的三种情况

        // 1、如果模式串p[j]是一个小写字母，那么只有s[i]也是一个相同的小写字母时，p[j]和s[i]才能匹配上
        // 即  dp[i][j] 可以由 dp[i-1][j-1] 转移过来  dp[i][j] = dp[i-1][j-1] && s[i]==p[j]

        // 2、如果模式串p[j]是一个?号，那么s[i]无论是什么，都能匹配上p[j]
        // 即  dp[i][j] = dp[i-1][j-1]

        // 3、如果模式串p[j]是一个*号，那么s[i]一样的无论是什么都能匹配上p[j]
        // 如果*匹配零个或多个字符，相当于使用了p[j]去匹配s[0]到s[i]的所有字符所以dp[i][j] = dp[0][j] || dp[1][j] || ... || dp[i-1][j]
        // 通俗的解释就是，如果前面有一个位置k匹配成功了，那么可以使用*号把位置k到位置i的所有字符全部匹配上

        int sLen = s.length();
        int pLen = p.length();

        // 为什么需要加1，因为s和p都有可能是空串
        boolean[][] dp = new boolean[sLen + 1][pLen + 1];

        // 二维dp的初始值一般都是第一列和第一行
        dp[0][0] = true; // 两个都是空串则匹配成功
        // 对于[i][0]表示s串不为空，但是模式串为空，此时肯定不能匹配上
        // 对于[0][j]表示p串不为空，但是原字符串为空，由于只有*号才能匹配空串，所以需要p串的前j个字符都是*号时，才匹配成功
        for (int j = 1; j <= pLen; j++) {
            if (p.charAt(j - 1) == '*') {
                dp[0][j] = true;
            } else {
                // 只要有一个不是*了，后面肯定也都匹配不上，直接使用数组的初始值false
                break;
            }
        }

        // 开始打表，dp[i][j]可得横坐标是p串，纵坐标是s串
        for (int i = 1; i <= sLen; i++) {
            for (int j = 1; j <= pLen; j++) {
                // 分情况讨论
                // 模式串和字符串的当前下标都是小写字母，而且相等
                if (p.charAt(j - 1) == s.charAt(i - 1)) {
                    dp[i][j] = dp[i - 1][j - 1];
                }
                // 模式串是?，不用考虑字符串，直接由上一个状态转移
                else if (p.charAt(j - 1) == '?') {
                    dp[i][j] = dp[i - 1][j - 1];
                }
                // 模式串是*，由字符串s的第0个到第i个转移，只要前面存在一个位置k能够匹配上k对应的模式串k_j位置，那么就可以从k+1到i-1全部由*号匹配
                else if (p.charAt(j - 1) == '*') {
                    for (int k = 0; k < i; k++) {
                        dp[i][j] |= dp[k][j];
                    }
                }
            }
        }
        return dp[sLen][pLen];
    }
}