package leetcode.dp.medium;

/**
 * @version 1.0
 * @description leetcode
 * <p>
 * 有一堆石头，每块石头的重量都是正整数。
 * <p>
 * 每一回合，从中选出任意两块石头，然后将它们一起粉碎。假设石头的重量分别为x 和y，且x <= y。那么粉碎的可能结果如下：
 * <p>
 * 如果x == y，那么两块石头都会被完全粉碎；
 * 如果x != y，那么重量为x的石头将会完全粉碎，而重量为y的石头新重量为y-x。
 * 最后，最多只会剩下一块石头。返回此石头最小的可能重量。如果没有石头剩下，就返回 0。
 * <p>
 * <p>
 * <p>
 * 示例：
 * <p>
 * 输入：[2,7,4,1,8,1]
 * 输出：1
 * 解释：
 * 组合 2 和 4，得到 2，所以数组转化为 [2,7,1,8,1]，
 * 组合 7 和 8，得到 1，所以数组转化为 [2,1,1,1]，
 * 组合 2 和 1，得到 1，所以数组转化为 [1,1,1]，
 * 组合 1 和 1，得到 0，所以数组转化为 [1]，这就是最优值。
 * <p>
 * <p>
 * 提示：
 * <p>
 * 1 <= stones.length <= 30
 * 1 <= stones[i] <= 1000
 * <p>
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/last-stone-weight-ii
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 * @date 2021/3/24 23:35
 **/
public class _1049_LastStoneWeightII {
    public int lastStoneWeightII(int[] stones) {
        // 每次任意选出两块石头做差，直到最后一块石头都不剩，或者还剩最后一块石头
        // 求最后一块石头的最小值

        // 每次都是做差，可以看作有两堆石头，第一堆石头全部是+号，第二堆石头全部是-号
        // 两队石头做差后，求最小差值
        // 如果一堆石头尽可能接近sum/2的话，另外一堆石头也会更加接近sum/2，这样差值就最小

        // 可以转化为，从i个石头中选出若干个石头，放入容量大小为sum/2的背包

        // 01背包问题的dp设计
        // 定义dp[i][j]表示前i个物体恰好装入容量大小为j的背包，能取得的最大价值
        // 这里没有价值，只需要考虑能否装入背包即可


        // 先求石头的和
        int sum = 0;
        for (int stone : stones) {
            sum += stone;
        }

        // 求背包的容量，即v = sum/2
        int v = sum / 2;

        // 物体的个数，即石头的个数
        int n = stones.length;

        // 定义dp数组，加1表示没有物体放入容量为0的背包
        int[][] dp = new int[n + 1][v + 1];

        // 初始值dp[0][0]，没有物体放入容量为0的背包，能取得的最大价值自然是0
        dp[0][0] = 0;

        // 先遍历物体
        for (int i = 1; i <= n; i++) {
            // 再遍历背包容量
            for (int j = 1; j <= v; j++) {
                // 如果石头i不能放入背包
                if (stones[i - 1] > j) {
                    dp[i][j] = dp[i - 1][j];
                } else {
                    // 如果石头i能够放入背包，则有两种选择
                    // 石头i放入背包，则石头i-1，至少需要预留出石头i的体积
                    // dp[i][j] = dp[i-1][j-stones[i]] + stones[i]

                    // 石头i不放入背包，则dp[i]的状态由石头i-1转移
                    // dp[i][j] = dp[i-1][j]

                    // 最终的dp[i][j]取两者的最大值
                    dp[i][j] = Math.max(dp[i - 1][j], dp[i - 1][j - stones[i - 1]] + stones[i - 1]);
                }
            }
        }
        // 这里的dp[n][v]表示的是前n个石头能凑出来的最接近sum/2的价值
        // 在上面v=sum/2的时候，没有考虑sum是奇数的情况
        // 如果sum是奇数，那么v=sum/2，向下取整后，是比sum/2实际的值要小的
        // 如果是偶数，v=sum/2，是一定等于sum/2的

        // 归纳来说：
        // 如果是奇数，前n个石头只能凑出无限接近于sum/2的最大整数，最终答案sum-2*v即可
        // 如果是偶数，前n个石头能够凑出刚好等于sum/2的最大证书，最终答案sum-2*v即可
        return sum - 2 * dp[n][v];
    }
}