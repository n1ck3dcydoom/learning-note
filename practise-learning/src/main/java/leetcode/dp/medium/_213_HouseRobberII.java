package leetcode.dp.medium;

/**
 * @version 1.0
 * @description leetcode
 * <p>
 * 你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都 围成一圈 ，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警 。
 * <p>
 * 给定一个代表每个房屋存放金额的非负整数数组，计算你 在不触动警报装置的情况下 ，能够偷窃到的最高金额。
 * <p>
 * <p>
 * <p>
 * 示例1：
 * <p>
 * 输入：nums = [2,3,2]
 * 输出：3
 * 解释：你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。
 * 示例 2：
 * <p>
 * 输入：nums = [1,2,3,1]
 * 输出：4
 * 解释：你可以先偷窃 1 号房屋（金额 = 1），然后偷窃 3 号房屋（金额 = 3）。
 * 偷窃到的最高金额 = 1 + 3 = 4 。
 * 示例 3：
 * <p>
 * 输入：nums = [0]
 * 输出：0
 * <p>
 * <p>
 * 提示：
 * <p>
 * 1 <= nums.length <= 100
 * 0 <= nums[i] <= 1000
 * <p>
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/house-robber-ii
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 * @date 2021/3/24 23:05
 **/
public class _213_HouseRobberII {
    public int rob(int[] nums) {

        int n = nums.length;

        // 定义dp[i]表示偷窃前i个房子能获得的最大金额
        // 如果dp长度等于n，那么没有房子偷的情况就没法放进去了，所以需要多一个位置出来保存dp[0]即没有房子的情况
        int[] dp = new int[n + 1];

        // 初始值自然就是没有房子偷的情况
        dp[0] = 0;

        // 递推表达式
        // 由于首尾相连，跟198题不一样的地方就是，第一间和最后一间房子不能同时偷取
        // 分情况考虑：1、一定不偷第一间房子  2、一定不偷最后一间房子

        // 如果只有一间房，那么这个既不属于情况一，也不属于情况二，所以单独拎出来讨论
        if (n == 1) {
            return nums[0];
        }
        // 房子总数大于等于2才分情况讨论

        // 1、一定不偷第一间房子
        int res1 = 0;
        // 初始值就是dp[1] = 0
        dp[1] = 0;
        // 从第二间房子开始遍历到最后一间房子
        for (int i = 2; i <= n; i++) {
            // 对于第i间房子来说，它只有两个选择，偷或者不偷
            // 如果偷第i间房子，那么i-1一定偷不了，所以dp[i]的状态由dp[i-2]转移
            // 即dp[i] = dp[i-2] + nums[i-1]

            // 如果不偷第i建房子，那么dp[i]的状态由dp[i-1]转移
            // 即dp[i] = dp[i-1]

            // 两个选择取最大值即为最后的dp[i]
            dp[i] = Math.max(dp[i - 2] + nums[i - 1], dp[i - 1]);

            res1 = Math.max(res1, dp[i]);
        }

        // 2、一定不偷最后一间房子
        int res2 = 0;
        // 初始值就是一间房子都不偷，即dp[0]
        dp[0] = 0;
        // 只有一间房已经单独讨论了，所以dp[1]也是初始值
        dp[1] = nums[0];
        // 如果两间房，由于最后一间房一定不能偷，所以dp[2]也是初始值
        dp[2] = nums[0];
        res2 = nums[0];

        // 从第三间房开始遍历到倒数第二间房子
        for (int i = 3; i < n; i++) {
            dp[i] = Math.max(dp[i - 2] + nums[i - 1], dp[i - 1]);
            res2 = Math.max(res2, dp[i]);
        }
        return Math.max(res1, res2);
    }
}