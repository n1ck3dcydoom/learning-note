package leetcode.dp.medium;

/**
 * @author zhanglei
 * @version 1.0
 * @description leetcode
 * 用一个大小为 m x n 的二维网格 grid 表示一个箱子。你有 n 颗球。箱子的顶部和底部都是开着的。
 * <p>
 * 箱子中的每个单元格都有一个对角线挡板，跨过单元格的两个角，可以将球导向左侧或者右侧。
 * <p>
 * 将球导向右侧的挡板跨过左上角和右下角，在网格中用 1 表示。
 * 将球导向左侧的挡板跨过右上角和左下角，在网格中用 -1 表示。
 * 在箱子每一列的顶端各放一颗球。每颗球都可能卡在箱子里或从底部掉出来。如果球恰好卡在两块挡板之间的 "V" 形图案，或者被一块挡导向到箱子的任意一侧边上，就会卡住。
 * <p>
 * 返回一个大小为 n 的数组 answer ，其中 answer[i] 是球放在顶部的第 i 列后从底部掉出来的那一列对应的下标，如果球卡在盒子里，则返回 -1 。
 * <p>
 * 输入：grid = [[1,1,1,-1,-1],[1,1,1,-1,-1],[-1,-1,-1,1,1],[1,1,1,1,-1],[-1,-1,-1,-1,-1]]
 * 输出：[1,-1,-1,-1,-1]
 * 解释：示例如图：
 * b0 球开始放在第 0 列上，最终从箱子底部第 1 列掉出。
 * b1 球开始放在第 1 列上，会卡在第 2、3 列和第 1 行之间的 "V" 形里。
 * b2 球开始放在第 2 列上，会卡在第 2、3 列和第 0 行之间的 "V" 形里。
 * b3 球开始放在第 3 列上，会卡在第 2、3 列和第 0 行之间的 "V" 形里。
 * b4 球开始放在第 4 列上，会卡在第 2、3 列和第 1 行之间的 "V" 形里。
 * 示例 2：
 * <p>
 * 输入：grid = [[-1]]
 * 输出：[-1]
 * 解释：球被卡在箱子左侧边上。
 * 示例 3：
 * <p>
 * 输入：grid = [[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1],[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1]]
 * 输出：[0,1,2,3,4,-1]
 *  
 * <p>
 * 提示：
 * <p>
 * m == grid.length
 * n == grid[i].length
 * 1 <= m, n <= 100
 * grid[i][j] 为 1 或 -1
 * <p>
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/where-will-the-ball-fall
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 * @date 2021/2/2 15:25
 **/
public class _1706_WhereWillTheBallFall {

    public static void main(String[] args) {
        int[][] grid = new int[][]{{1, 1, 1, 1, 1, 1}, {-1, -1, -1, -1, -1, -1}, {1, 1, 1, 1, 1, 1}, {-1, -1, -1, -1, -1, -1}};
        int[] res = findBall(grid);
        for (int re : res) {
            System.out.print(re + " ");
        }
    }

    public static int[] findBall(int[][] grid) {
        // 网格的高度
        int h = grid.length;
        // 网格的长度
        int w = grid[0].length;
        // 第一步，定义dp数组
        // 定义dp[i]表示每一层第i个小球的所处位置
        int[] dp = new int[w];

        // 第二步，初始值
        // 每个小球的开始位置和其下标相同
        for (int i = 0; i < w; i++) {
            dp[i] = i;
        }

        // 第三步，选择，即递推表达式
        // 考虑第i层小球的位置依赖于第i-1层小球的位置
        // j号小球只有种状态可以选择

        // dp[j]表示第j个小球所处的位置

        // 1、往右滚动
        // 相邻右格子(dp[j]+1)不能是右边缘 && 当前格子往右斜         && 相邻右格子继续往右斜
        // dp[j] + 1 < w                 && grid[i][dp[j]] == 1   && grid[i][dp[j] + 1] == 1

        // 2、往左滚动
        // 相邻左格子(dp[j]-1)不能是左边缘  && 当前格子往左斜         && 相邻左格子继续往左斜，且
        // dp[j] - 1 >= 0                 && grid[i][dp[j]] == -1  && grid[i][dp[j] - 1] == -1

        // 3、卡在中间或者两个边缘
        // 右格子不是右边缘 && 当前格子往右斜         && 相邻右格子往左斜
        // dp[j] + 1 < w   && grid[i][dp[j]] == 1   && grid[i][dp[j] + 1] == -1
        // 左格子不是左边缘 && 当前格子往左斜         && 相邻左格子往右斜
        // dp[j] - 1 >= 0  && grid[i][dp[j]] == -1  && grid[i][dp[j] - 1] == 1
        // 当前格子已经是左边缘 && 当前格子往左斜
        // dp[j] == 0         && grid[i][dp[j]] == -1
        // 当前格子已经是右边缘 && 当前格子往右斜
        // dp[j] + 1 == w     && grid[i][dp[j]] == 1

        // 遍历每一层
        for (int i = 0; i < h; i++) {
            // 遍历当前层每个可以继续往下滚的球，即dp[i] != -1 的球
            for (int j = 0; j < w; j++) {
                if (dp[j] != -1) {
                    // 判断当前层每个球往下走的状态选择
                    // 往右滚
                    if (dp[j] + 1 < w && grid[i][dp[j]] == 1 && grid[i][dp[j] + 1] == 1) {
                        dp[j] += 1;
                    }
                    // 往左滚
                    else if (dp[j] - 1 >= 0 && grid[i][dp[j]] == -1 && grid[i][dp[j] - 1] == -1) {
                        dp[j] -= 1;
                    }
                    // 卡住
                    else {
                        dp[j] = -1;
                    }
                }
            }
        }
        return dp;
    }
}