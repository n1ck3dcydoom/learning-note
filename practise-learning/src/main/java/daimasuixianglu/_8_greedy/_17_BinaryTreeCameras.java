package daimasuixianglu._8_greedy;

import leetcode.data.TreeNode;

/**
 * Created by n!Ck
 * Date: 2022/2/21
 * Time: 23:52
 * Description:
 */

public class _17_BinaryTreeCameras {

    private static int res = 0;

    public int minCameraCover(TreeNode root) {
        // 二叉树的三种遍历方式，分别对应三种信息传递方向
        // 1、前序遍历，自上而下传递
        // 2、中序遍历，从左上往右下传递
        // 3、后序遍历，自下而上传递

        // 题目求最小摄像头数量，容易想到，中间节点安装摄像头是最划算的，因为它可以监视父节点和孩子节点和自己本身
        // 一个节点所处的状态如下：
        // 1、当前节点没有被摄像头覆盖-1
        // 2、当前节点是摄像头0
        // 3、当前节点被摄像头覆盖1
        // 贪心的做法就是尽量避免在叶子节点安装摄像头，因为叶子节点的摄像头只能覆盖本身和父节点
        // 而中间节点的摄像头可以覆盖左右子树和父节点

        // 考虑空节点的状态
        // 如果空节点是摄像头，那么叶子节点的父节点就不用安装摄像头了（因为此时叶子节点作为中间节点存在，且已经被覆盖，就不用其父节点再覆盖它了）
        // 如果空节点是未覆盖，那么就需要叶子节点安装摄像头，这与贪心的做法相矛盾
        // 所以空节点只能是已覆盖，这样叶子节点就不用再安装摄像头，交给叶子节点的父节点来覆盖叶子节点

        // 对于一个节点，它接受两个孩子节点传递上来的信息
        // 如果两个孩子都没有被覆盖，则父节点必须安装摄像头
        // 如果有一个孩子被覆盖，另一个没有覆盖，则父节点必须安装摄像头
        // 若有一个孩子被覆盖，另一个是摄像头，则父节点不用安装摄像头
        // 如果两个孩子都不需要父节点安装摄像头，则父节点不安装摄像头

        // 如果递归结束后，根节点root都没有被覆盖到，则根节点root也是一个摄像头
        if (dfs(root) == 0) {
            res++;
        }
        return res;
    }

    private int dfs(TreeNode root) {
        // 空节点，返回被覆盖
        if (root == null) {
            return 1;
        }
        // 查找左子树
        int left = dfs(root.left);
        // 查找右子树
        int right = dfs(root.right);
        // 根据左右子树的返回，判断当前节点是否需要安装摄像头，一共两个孩子，3种可能的状态
        // 覆盖+未覆盖  覆盖+摄像头 未覆盖+摄像头
        // 覆盖+覆盖  未覆盖+未覆盖  摄像头+摄像头

        // 覆盖+覆盖，则当前父节点是未覆盖状态
        if (left == 1 && right == 1) {
            return -1;
        }
        // 未覆盖+未覆盖，则当前节点必须是摄像头
        else if (left == -1 && right == -1) {
            res++;
            return 0;
        }
        // 摄像头+摄像头，则当前节点是已覆盖
        else if (left == 0 && right == 0) {
            return 1;
        }
        // 覆盖+未覆盖，则当前节点也必须安装摄像头
        else if ((left == -1 && right == 1) || (left == 1 && right == -1)) {
            res++;
            return 0;
        }
        // 未覆盖+摄像头，则当前节点也必须安装摄像头
        else if ((left == 0 && right == -1) || (left == -1 && right == 0)) {
            res++;
            return 0;
        }
        // 覆盖+摄像头，则当前节点是已覆盖
        else if ((left == 1 && right == 0) || (left == 0 && right == 1)) {
            return 1;
        }
        return -1;
    }
}
